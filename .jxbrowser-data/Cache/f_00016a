<!--
    Copyright (c) 2015-2020, Texas Instruments Incorporated
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    *   Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
    *   Neither the name of Texas Instruments Incorporated nor the names of
    its contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
    OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<link rel="import" href="../polymer/polymer.html">
<link rel="import" href="../iron-icons/iron-icons.html">
<link rel="import" href="../ti-core-icons/ti-core-icons.html">
<link rel="import" href="ti-widget-menuitem.html">
<link rel="import" href="../iron-flex-layout/classes/iron-flex-layout.html">

<!--
`ti-widget-menubar` a menu bar to which menu items can be added.  The menu bar has three main
sections.  The first is optional can show a product name and/or logo if required.  The second section
is for the ti-widget-menuitems that are dropped onto the menu bar and appears on the left side immediately
after the optional first section.  The third and final section is for all other widgets that are dropped
onto the menu bar that are not ti-widget-menuitems.  The third section is justified to the right side of the
menu bar.

When there is not enough room to display everything on the menu bar, a more menu button will appear between
the second and third sections.  All the menu items that cannot be displayed in the second section will be
placed in a dropdown menu accessible from this button.

Typically the menu bar is placed using either absolute or fixed position with left, top, and right being set to zero.
This positions the bar at the top of whichever the container it was added to.  You can then set a margin that is non zero to create
space around the menu bar if so desired.

Example:

    <ti-widget-menubar>
        <ti-widget-menuitem></ti-widget-menuitem>
        <ti-widget-menuitem></ti-widget-menuitem>
        <ti-widget-menuitem></ti-widget-menuitem>
    </ti-widget-menubar>

See ../demo.html for a full working example of how to use this component.

@group TI Widget
@element ti-widget-menubar
@homepage https://gitorious.design.ti.com/guicomposer-nw/ti-widget-menubar
-->
<dom-module id="ti-widget-menubar">
    <template>
        <style>
            *{
                Box-sizing: Border-box;
                -webkit-user-select: none;
                -khtml-user-select: none;
                -moz-user-select: -moz-none;
                -o-user-select: none;
                user-select: none;
            }

            :host {
                position:relative;
                top:0;
                left:0;
                right: 0;
                height: 42px;
                margin: 0 0 0 0;
                padding: 0;
                display: block;
                z-index: 1000;
                white-space: nowrap;
                -webkit-app-region: drag;  /* see https://github.com/nwjs/nw.js/wiki/Frameless-window */
            }

            /* styles for the app drawer */
            #navMenuLogo {
                display:inline-block;
                margin: 0px;
                padding-left: 10px;
            }
            #LogoImg {
                height: 30px;
            }
            #navToolList {
                position: absolute;
                right: 0;
                top: 0;
                bottom: 0;
                -webkit-app-region: no-drag;  /* see https://github.com/nwjs/nw.js/wiki/Frameless-window */
            }
            #navMenuList, #moreButton {
                list-style-type: none;
                display:inline-block;
                height:42px;
                vertical-align:bottom;
                margin:0px;
                padding:0px;
                line-height: 28px;
                -webkit-app-region: no-drag;  /* see https://github.com/nwjs/nw.js/wiki/Frameless-window */
            }
            #navToolList * {
                outline: none;
            }

            div, header {
                background-color: inherit;
            }

            #productLabel {
                display:inline-block;
                vertical-align: middle;
                font-size: 21px;
                font-weight:500;
                margin: 0px;
                padding-left: 10px;
                height: 42px;
                line-height: 42px;
                cursor: pointer;

                @apply --product-label-styles;
            }
            #productSeparator {
                margin-left: 20px;
                border-left: 1px solid rgba(256, 256, 256, 0.5);
            }

        </style>

        <header>
            <template is="dom-if" restamp="true" if="{{logoImage}}">
                <div id="navMenuLogo">
                    <a title="{{logoTitle}}" on-click="productNameClicked" style="color:inherit;"><iron-icon id="LogoImg" icon="{{logoImage}}"/></a>
                </div>
            </template>
            <template is="dom-if" restamp="true" if="{{productName}}">
                <div id="productLabel" on-click="productNameClicked">
                    <span id="productName" title="{{productTooltip}}">{{productName}}</span>
                    <span id="productSeparator"></span>
                </div>
            </template>
            <ul id="navMenuList">
                <content select=":not(.moreMenuItem):not(.toolMenuItem)"></content>
            </ul>
            <div id="navToolList" class="layout horizontal center">
                <ti-widget-menuitem id="moreButton" icon-name="more-vert">
                      <content select=".moreMenuItem"></content>
                </ti-widget-menuitem>
                <content select=".toolMenuItem"></content>
            </div>

        </header>
    </template>
    <script>

        Polymer ({
            is: 'ti-widget-menubar',

            properties: {

                /**
                 * Provides a tooltip for the optional logo image that can be displayed on the left hand side of the
                 * menubar, before any menu items.
                 *
                 * @attribute logoTitle
                 * @type string
                 */
                logoTitle: {
                    notify: true,
                    type: String,
                    value: ""
                },

                /**
                 * Provides an optional logo icon that can be displayed on the left hand side of the
                 * menubar, before any menu items.
                 *
                 * @attribute logoImage
                 * @type string
                 */
                logoImage: {
                    notify: true,
                    type: String,
                    value: ""
                },

                /**
                 * Provides an optional product name that can be displayed on the left hand side of the
                 * menubar, immediately after the optional logo image, and before any menu items.
                 *
                 * @attribute productName
                 * @type string
                 */
                productName: {
                    notify: true,
                    type: String,
                    value: undefined
                },

                /**
                 * Provides the tooltip for the optional product name that can be displayed on the menu bar.
                 *
                 * @attribute productTooltip
                 * @type string
                 */
                productTooltip: {
                    notify: true,
                    type: String,
                    value: undefined
                },

                /**
                 * Enable the menu to show on mouse hover.
                 *
                 * @attribute openOnHOver
                 * @type boolean
                 */
                openOnHover: {
                    notify: true,
                    type: Boolean,
                    value: false
                }


            },
            _moreIndex : 0,

            show : function(event, detail, target)
            {
                var menuItem = this.findMenuByName(target.innerText);
                if (menuItem)
                {
                    var y = target.getBoundingClientRect().top;
                    var x = this.$.moreButton.getBoundingClientRect().right-1;
                    menuItem.moveTo(x, y);
                    menuItem.show();
                }
            },
            hide : function(event, detail, target)
            {
                var menuItem = this.findMenuByName(target.innerText);
                if (menuItem)
                {
                    menuItem.hide();
                }
            },
            findMenuByName : function(name)
            {
                name = name.trim();
                for(var i = 0; i < this.menuItems.length; i++ )
                {
                    var item = this.menuItems[i];
                    if (item.name === name)
                    {
                        return item;
                    }
                }
                return null;
            },
            onChildMenuItemsChanged : function()
            {
                if (this._domReadyWasCalled)
                {
                    this._menuWidths = [];
                    this._menuIndexes = [];
                    var items = Polymer.dom(this).children;
                    var moreWidth = this.$.moreButton.offsetWidth;
                    var cumulativeWidth = moreWidth;
                    if (this.logoImage)
                    {
                        var navMenuLogo = this.$$("#navMenuLogo");
                        cumulativeWidth += navMenuLogo.offsetWidth;
                    }
                    if (this.productName)
                    {
                        var productLabel = this.$$("#productLabel");
                        cumulativeWidth += productLabel.offsetWidth;
                    }
                    if (items)
                    {
                        for(var i = 0; i < items.length; i++ )
                        {
                            var item = items[i];
                            if (item && item.getWidth)
                            {
                                this.toggleClass('toolMenuItem', false, item);
                                cumulativeWidth += item.getWidth();
                                this._menuWidths.push(cumulativeWidth);
                                this._menuIndexes.push(i);
                                if (item.registerActiveMenuManager)
                                {
                                    item.registerActiveMenuManager(this);
                                }
                            }
                            else
                            {
                                this.toggleClass('toolMenuItem', true, item);
                            }
                        }
                        this._menuWidths[this._menuWidths.length-1] -= moreWidth;
                    }
                    this.onresized();

                    for(var i = this._menuWidths.length; i-- > 0; )
                    {
                        this._setMoreMenuItem(items[this._menuIndexes[i]], i >= this._moreIndex);
                    }
                }
            },
            setActiveMenuItem: function(activeMenuItem)
            {
                if (this._activeMenuItem && this._activeMenuItem !== activeMenuItem)
                {
                    this._activeMenuItem.hideMenu();
                }
                this._activeMenuItem = activeMenuItem;
                return this._showFullMenus || this.openOnHover;
            },
            onBlurHandler: function(event)
            {
                if (!this.contains(event.relatedTarget))
                {
                    this._doHideMenu();
                }
            },
            _showFullMenus: false,
            onActiveMenuClicked: function(flag)
            {
                this._showFullMenus = flag;
            },
            blur: function()
            {
                this._doHideMenu();
            },
            attached : function()
            {
                this.async(this.domReady.bind(this), 1);
            },
            domReady : function()
            {
                this._domReadyWasCalled = true;

                this.onChildMenuItemsChanged();

                var that = this;
                var resizeListener = function() { that.onresized(); };
                window.addEventListener("resize", resizeListener);
                document.addEventListener("login", resizeListener);
                window.addEventListener("scroll", this._doHideMenu.bind(this));

                // add loss of focus listener to main menu item to hide the popup menu if showing.
                this.addEventListener("blur", this.onBlurHandler.bind(this), true);

                this.$.moreButton.registerActiveMenuManager(this);
            },
            _setMoreMenuItem: function(menuItem, isMoreItem)
            {
                if (menuItem.popupOrientation)
                {
                    menuItem.popupOrientation(isMoreItem ? 'side' : 'bottom');
                }
                this.toggleClass('moreMenuItem', isMoreItem, menuItem);
                this.toggleClass('subMenuItem', isMoreItem, menuItem);
                var innerMenuItem = menuItem.getMenuItem && menuItem.getMenuItem() || menuItem;
                if (innerMenuItem !== menuItem)
                {
                    this.toggleClass('moreMenuItem', isMoreItem, innerMenuItem);
                    this.toggleClass('subMenuItem', isMoreItem, innerMenuItem);
                }
                if (menuItem.registerActiveMenuManager)
                {
                    menuItem.registerActiveMenuManager(isMoreItem ? this.$.moreButton : this);
                }
            },
            onresized : function()
            {
                var rect = this.getBoundingClientRect();
                var size = rect.right - rect.left;
                size -= (this.$.navToolList.offsetWidth - this.$.moreButton.offsetWidth);


                // attempt to move children from more icon
                var children = Polymer.dom(this).children;
                while(this._moreIndex < this._menuWidths.length)
                {
                    var right = this._menuWidths[this._moreIndex];
                    if (right < size)
                    {
                        // there is room in the regular menu
                        var menuItem = children[this._menuIndexes[this._moreIndex]];
                        this._moreIndex++;
                        this._setMoreMenuItem(menuItem, false);
                    }
                    else
                    {
                        break;
                    }
                }

                // attempt to move children to more icon
                while(this._moreIndex > 0)
                {
                    var right = this._menuWidths[this._moreIndex-1];
                    if (right >= size)
                    {
                        // no more room for this item, move to more menu
                        this._moreIndex--;
                        var menuItem = children[this._menuIndexes[this._moreIndex]];
                        this._setMoreMenuItem(menuItem, true);
                    }
                    else
                    {
                        break;
                    }
                }

                // show/hide more menu button as needed
                if (this._moreIndex < this._menuWidths.length)
                {
                    this.$.moreButton.style.display = "";
                }
                else
                {
                    this.$.moreButton.style.display = "none";
                }

                // hide menu on resize, like it was a blur event.
                this._doHideMenu();
            },

            _doHideMenu: function() {
                this.setActiveMenuItem(null);
                this._showFullMenus = false;
            },

            productNameClicked: function() {
                this.fire("product-name-clicked");
            }
        });

    </script>


</dom-module>
