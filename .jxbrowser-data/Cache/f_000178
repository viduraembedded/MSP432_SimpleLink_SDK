
<!--
    Copyright (c) 2017, Texas Instruments Incorporated
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    *   Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
    *   Neither the name of Texas Instruments Incorporated nor the names of
    its contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
    OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<link rel="import" href="../polymer/polymer.html">
<link rel="import" href="../paper-material/paper-material.html">
<link rel="import" href="../paper-material/paper-material-shared-styles.html">
<link rel="import" href="../paper-toolbar/paper-toolbar.html">
<link rel="import" href="../paper-icon-button/paper-icon-button.html">
<link rel="import" href="../iron-icons/iron-icons.html">
<link rel="import" href="../iron-icons/editor-icons.html">
<link rel="import" href="ti-widget-eventlog.html">
<link rel="import" href="../iron-resizable-behavior/iron-resizable-behavior.html">
<link rel="import" href="../iron-flex-layout/iron-flex-layout.html">
<link rel="import" href="../paper-header-panel/paper-header-panel.html">
<link rel="import" href="../ti-widget-common/ti-widget-checkbox.html">
<link rel="import" href="../ti-widget-common/ti-widget-label.html">
<link rel="import" href="../ti-core-assets/ti-core-assets.html">
<link rel="import" href="../ti-widget-menubar/ti-widget-filesave-action.html">
<link rel="import" href="../ti-widget-menubar/ti-widget-menuitem.html">
<!--
`ti-widget-eventlog-view` provides a view for a list of event logs, including a toolbar and the ability to filter
 the event logs that are displayed based on user-specified criteria.

Example:

    <ti-widget-eventlog-view></ti-widget-eventlog-view>

@group TI Widgets
@element ti-widget-eventlog-view
@demo demo.html
@homepage ../ti-guicomposer-helpindex/demo.html
-->
<dom-module id='ti-widget-eventlog-view'  >
    <!-- <script  type="text/javascript"  src="../ti-core-assets/scripts/resizable-tables.js"></script>  -->

    <template >
        <style is="custom-style" include="paper-material-shared-styles">

            :host {
                display: block;
                font-size: small;
                min-height: 230px;
            }

            .flex-horizontal {
                @apply(--layout-horizontal);
                @apply(--layout-justified);
            }
            .flexchild {
                @apply(--layout-flex);
            }

            .flex-vertical {
                @apply(--layout-vertical);
                height: 220px;
            }
            .flexchild-vertical {
                @apply(--layout-flex);
            }
            .flexchild-end {
                @apply(--layout-self-end);
            }

            #toolbar {
                border-bottom:solid 1px lightgrey;
                width: 100%;
                background-color: white;
                color: black;
                padding:0;
                --paper-toolbar-height: 40px;
                --paper-toolbar: {
                    font-size: 20px; /* Change default font size */
                };
            }
            #eventlog {
                display: block;
                width: 100%;
                height:100%;
            }
            #filterLabel {
                right: 45px;
                width: 90px;
                margin-top:5px;
            }
            #saveBtn {
                right: 30px;
            }
            #clearBtn {
                right:15px;
            }
            #closeBtn {
                right: 0px;
            }
            #filters {
                z-index: 100;
                background-color: white;
                position: absolute;
                display:none;
                right: 50px;
                top: 40px;
                border: solid 1px lightgrey;
                font-family: Roboto, sans-serif;
            }
            .iconbtn {
                width:24px;
                padding:2px;
            }
            #view {
                background-color: white;
                border-top: solid 1px lightgrey;
            }
            #logViewDiv {
                transition: opacity 0.5s;
                /* offset-x | offset-y | blur-radius | spread-radius | color */
                box-shadow: 0px -8px 8px -4px rgba(0, 0, 0, 0.4);
            }
        </style>
        <input style="display:none" type="file" id="eventlogSaveDialog" nwsaveas="eventlog.csv" accept=".csv"/>
        <div id="logViewDiv" style="height:250px;background-color:white;">
            <paper-header-panel id="view" mode="waterfall" style="background-color:white;">
                <paper-toolbar id="toolbar">
                    <div class="spacer title" style="margin-left:20px;padding:2px;">Logs</div>

                    <paper-icon-button id="filterBtn" class="iconbtn" icon="icons:filter-list" on-click="toggleFilterBox" title="filter events"></paper-icon-button>
                    <ti-widget-label id="filterLabel" label="FILTER" font-size="small" font-weight="bold" on-click="toggleFilterBox" title="filter events"></ti-widget-label>
                    <paper-icon-button id="saveBtn" class="iconbtn" icon="icons:save" on-click="saveAs" title="save events"></paper-icon-button>
                    <paper-icon-button id="clearBtn" class="iconbtn" icon="block" on-click="clear" title="clear events"></paper-icon-button>
                    <paper-icon-button id="closeBtn" class="iconbtn" icon="close" on-click="closeView" title="hide event log"></paper-icon-button>
                </paper-toolbar>

                <div id="divPanelContent" class="content fit" style="background-color:white;height:100%;width:100%;">
                    <ti-widget-eventlog id="eventlog" class="flexchild-vertical" show-event-number="[[showEventNumber]]" show-newest-first="[[showNewestFirst]]"
                                        is-info-visible="[[isInfoEnabled]]" is-warning-visible="[[isWarningEnabled]]"
                                        is-error-visible="[[isErrorEnabled]]" is-debug-visible="[[isDebugEnabled]]"></ti-widget-eventlog>
                </div>
            </paper-header-panel>
        </div>
        <paper-material id="filters" elevation="3" style$="[[_getVisibility(_isFilterBoxVisible)]];">
            <div id="filter_info" class="flex-horizontal container" style="padding:10px 15px 4px 15px;vertical-align:middle;">
                <ti-widget-checkbox  id="infoEnabled" label="" checked="{{isInfoEnabled}}"></ti-widget-checkbox>
                <iron-icon   id="infoIcon" icon="info" style="color:#16b;height:18px;width:18px;"></iron-icon>
                <ti-widget-label class="flexchild" id="infoLabel" label="info" font-size="small" style="padding-left:10px;"></ti-widget-label>
            </div>
            <div id="filter_warning" class="flex-horizontal container" style="padding:10px 15px 4px 15px;vertical-align:middle;">
                <ti-widget-checkbox  id="warningEnabled" label="" checked="{{isWarningEnabled}}"></ti-widget-checkbox>
                <iron-icon   id="warningIcon" icon="warning" style="color:#f80;height:18px;width:18px;"></iron-icon>
                <ti-widget-label class="flexchild" id="warningLabel" label="warning" font-size="small" style="padding-left:10px;"></ti-widget-label>
            </div>
            <div id="filter_error" class="flex-horizontal container" style="padding:10px 15px 4px 15px;vertical-align:middle;">
                <ti-widget-checkbox  id="errorEnabled" label="" checked="{{isErrorEnabled}}"></ti-widget-checkbox>
                <iron-icon   id="errorIcon" icon="error" style="color:#f00;height:18px;width:18px;"></iron-icon>
                <ti-widget-label class="flexchild" id="errorLabel" label="error" font-size="small" style="padding-left:10px;"></ti-widget-label>
            </div>
            <div id="filter_debug" class="flex-horizontal container" style="padding:10px 15px 4px 15px;vertical-align:middle;">
                <ti-widget-checkbox  id="debugEnabled" label="" checked="{{isDebugEnabled}}"></ti-widget-checkbox>
                <iron-icon   id="debugIcon" icon="editor:format-indent-decrease" style="color:#16b;height:18px;width:18px;"></iron-icon>
                <ti-widget-label class="flexchild" id="debugLabel" label="debug" font-size="small" style="padding-left:10px;"></ti-widget-label>
            </div>

        </paper-material>
    </template>
    <script>
        Polymer ({
            is: 'ti-widget-eventlog-view',
            hostAttributes: {
            },
            behaviors: [
                Polymer.IronResizableBehavior
            ],
            /**
             * Fired when the user has closed the event log
             *
             * @event eventlogclosed
             */
            properties: {
                _isVisible: {
                    notify: true,
                    type: Boolean,
                    value: true,
                    observer: "_isVisibleChanged"
                },
                _isHidden: {
                    notify: true,
                    type: Boolean,
                    value: false,
                    observer: "_isHiddenChanged"
                },
                _isFilterBoxVisible: {
                    notify: true,
                    type: Boolean,
                    value: false
                },

                /**
                 * filter setting for info events.  Event is displayed if true
                 *
                 * @attribute isInfoEnabled
                 * @type Boolean
                 * @default true
                 */
                isInfoEnabled: {
                    notify: true,
                    type: Boolean,
                    value: true,
                    observer: ""
                },
                /**
                 * filter setting for warning events.  Event is displayed if true
                 *
                 * @attribute isWarningEnabled
                 * @type Boolean
                 * @default true
                 */
                isWarningEnabled: {
                    notify: true,
                    type: Boolean,
                    value: true
                },
                /**
                 * filter setting for error events.  Event is displayed if true
                 *
                 * @attribute isErrorEnabled
                 * @type Boolean
                 * @default true
                 */
                isErrorEnabled: {
                    notify: true,
                    type: Boolean,
                    value: true
                },
                /**
                 * filter setting for debug events.  Event is displayed if true
                 *
                 * @attribute isDebugEnabled
                 * @type Boolean
                 * @default false
                 */
                isDebugEnabled: {
                    notify: true,
                    type: Boolean,
                    value: false
                },

                showEventNumber: {
                    notify: true,
                    type: Boolean,
                    value: false
                },
                showNewestFirst: {
                    notify: true,
                    type: Boolean,
                    value: true
                }
            },
            /**
             * adds an event to the event log list.
             * @param eventType: one of: info warning error debug
             * @param eventText: the string to be displayed for this event
             */
            log: function(eventType, eventText){
                if ((!this.$) || (!this.$.eventlog)) return;
                this.$.eventlog.log(eventType,eventText);
            },
            /**
             * returns the icon that represents the specified eventType,
             * where eventType is one of the following strings:
             * - error
             * - warning
             * - info
             * - debug
             *
             * @param eventType: one of: info warning error debug
             */
            iconForItem: function(eventType){
                return this.$.eventlog.iconForItem(eventType);
            },
            _onResize: function () {
                if (!this.$) return;
                this._resizeCtr++;
                this.notifyPath('_resizeCtr',this._resizeCtr);
                this.async(function(){
                    this.updateStyles(); // ensure css style is updated
                    Polymer.dom.flush();
                }.bind(this),null,5);
            },
            onResize: undefined,
            _onResizedByDesigner: function () {
                this.onResize();
            },
            onResizedByDesigner: undefined,
            _getVisibility: function(isVisible) {
                var result = "display:none;";
                if (isVisible) {
                    result = "display:block;";
                }
                return result;
            },
            _isVisibleChanged: function(){
                if (this._isHidden === this._isVisible) {
                    this._isHidden = !this._isVisible;
                }
                if (!this._isVisible){
                    this._isFilterBoxVisible = false;
                } else {
                    this.$.eventlog.refreshList();
                }
            },
            _isHiddenChanged: function(){
                this._isVisible = !this._isHidden;
            },
            refreshList: function(){
                if ((!this.$) || (!this.$.eventlog)) return;
                this.$.eventlog.refreshList();
            },
            /**
             * call openView to cause the event log to become visible
             */
            openView: function(){
                this._isVisible = true;
                this.style.display="block";
            },
            /**
             * call closeView to cause the event log to become hidden.
             * Note that the events that have been logged are not affected by this.
             */
            closeView: function(){
                this._isVisible = false;
                this.style.display = "none";
                this.fire("eventlogclosed");
            },
            /**
             * call toggleView to cause the event log to become visible if it is hidden
             * or hidden if it is visible, e.g.  in response to
             * clicking the book icon in the statusbar
             */
            toggleView: function(){
                if (!this._isVisible) {
                    this.openView();
                } else {
                    this.closeView();
                }
            },
            toggleFilterBox: function(){
                this._isFilterBoxVisible = !this._isFilterBoxVisible;
            },
            browseAndSave: function(data, callback)
            {
                var chooser = this.$.eventlogSaveDialog;
                chooser.value = null;
                chooser.addEventListener("change", function changeEvtListner(evt)
                {
                    var filePath = this.value;
                    chooser.nwsaveas = filePath;
                    gc.File._saveFile(filePath, data, callback);
                    chooser.removeEventListener("change", changeEvtListner, false);
                }, false);
                chooser.click();
            },
            saveAs: function(){
                var strEventLog = this.$.eventlog.getEventLogAsCsv();
                if (gc.desktop.isDesktop()){
                    this.browseAndSave(strEventLog, function(result, errorInfo) {
                        if (errorInfo) {
                            this.log("error","Error saving event log: "+errorInfo.message);
                        } else if ((result) && (result.localPath)) {
                            this.log("info", "Event Log saved to " + result.localPath);
                        }
                    }.bind(this));
                } else {
                    var blob = new Blob([strEventLog], {
                        type: 'text/plain;charset=utf-8'
                    });
                    saveAs(blob, 'eventlog.csv');  // Calls FileSaver.js global function saveAs
                    this.log("info", "eventlog.csv file downloaded");
                }
            },
            /**
             * clears all of the events from the event log
             */
            clear: function(){
                this.$.eventlog.clear();
            },
            ready: function(){
                 this.onResize = this._onResize.bind(this);
            },
            attached: function() {
                // register the first application event log view
                if (gc && (!this.parentNode.classList || !this.parentNode.classList.contains('ti-widget-scripting'))) {
                    gc.services = gc.services || {};
                    if (!gc.services[this.is]) {
                        gc.services[this.is] = this;
                    }
                }


                this.async(function() {
                    this.domReady();
                }.bind(this),1);
            },
            detached: function() {
                if (gc.services[this.is] === this) {
                    delete gc.services[this.is];
                }
            },
            domReady: function(){
                var _self = this;
                this.$.eventlog.isInfoEnabled = this.isInfoEnabled;
                this.$.eventlog.isWarningEnabled = this.isWarningEnabled;
                this.$.eventlog.isErrorEnabled = this.isErrorEnabled;
                this.$.eventlog.isDebugEnabled = this.isDebugEnabled;
                if (this.style.display === "none"){
                    this._isVisible = false;
                    this._isHidden = true;
                }
                window.onresize = function(e){
                    gc.console.debug("ti-widget-eventlog","Got a resize Event!");
                    _self.onResize();
                };

            }
        });
    </script>
</dom-module>
